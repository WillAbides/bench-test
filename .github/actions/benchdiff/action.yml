name: benchdiff
description: use benchdiff
inputs:
  benchdiff_version:
    description: Version of benchdiff to use (exclude "v" from the front of the release name)
    default: 0.1.1
    required: false
  benchdiff_dir:
    description: Where benchdiff will be installed
    default: ${{ runner.temp }}/benchdiff
    required: false
  install_only:
    description: Whether to stop after installing. Any value other than "false" is interpreted as true.
    default: "false"
    required: false
  benchdiff_args:
    description: |
      Arguments for the benchdiff command.
      All instances of $default_base_ref will be replaced with this repo's default branch.

      Flags:
        -h, --help                       Show context-sensitive help.
            --base-ref="HEAD"            The git ref to be used as a baseline.
            --bench="."                  Run only those benchmarks matching a regular expression.
            --bench-args="test -bench {{.Bench}} -run '^$' -benchmem -count {{.BenchCount}} {{.Packages}}"
                                         Use these arguments to run benchmarks. It may be a template.
            --bench-cmd="go"             The go command to use for benchmarks.
            --bench-count=10             Run each benchmark n times.
            --force-base                 Rerun benchmarks on the base reference even if the output already exists.
            --packages="./..."           Run benchmarks in these packages.
            --results-dir="./tmp"        The directory where benchmark output will be deposited.
            --alpha=0.05                 consider change significant if p < Î± (default 0.05)
            --csv                        print results in CSV form
            --delta-test="utest"         significance test to apply to delta: utest, ttest, or none
            --geomean                    print the geometric mean of each file
            --html                       print results as an HTML table
            --norange                    suppress range columns (CSV only)
            --reverse-sort               reverse sort order
            --sort="none"                sort by order: delta, name, none
            --split="pkg,goos,goarch"    split benchmarks by labels
    default: "--base-ref=$default_base_ref"
    required: false
outputs:
  benchdiff_bin:
    description: path to the benchdiff executable
    value: ${{ steps.install.outputs.benchdiff_bin }}
  benchdiff_out:
    description: stdout from benchdiff
    value: ${{ steps.run-benchdiff.outputs.output }}
runs:
  using: composite
  steps:
    - id: linux-only
      shell: bash
      run: |
        if [ "${{ runner.os }}" != "Linux" ]; then
          echo This action only runs on Linux
          exit 1
        fi
    - id: install
      shell: bash
      run: |
        set -e
        benchdiff_dir="${{ inputs.benchdiff_dir }}"
        mkdir -p "$benchdiff_dir"
        cd "$benchdiff_dir"
        benchdiff_version="${{ inputs.benchdiff_version }}"
        tarfile="benchdiff_${benchdiff_version}_linux_amd64.tar.gz"
        url="https://github.com/WillAbides/benchdiff/releases/download/v${benchdiff_version}/${tarfile}"
        curl --silent -OL "$url"
        tar -xzf "$tarfile" benchdiff
        rm "$tarfile"
        echo "::set-output name=benchdiff_bin::$benchdiff_dir/benchdiff"
    - id: run-benchdiff
      shell: bash
      run: |
        set -e
        if [ "${{ inputs.install_only }}" != "false" ]; then
          exit 0
        fi
        benchdiff_args='${{ inputs.benchdiff_args }}'
        if [[ "$benchdiff_args" == *'$default_base_ref'* ]]; then
          remote="$(git rev-parse --abbrev-ref --symbolic-full-name @{u} | cut -d "/" -f 1)"
          default_branch="$(git remote show $remote | grep "HEAD branch" | cut -d ":" -f 2 | tr -d '[:space:]')"
          benchdiff_args="$(sed "s|\$default_base_ref|$remote/$default_branch|g" <<< "$benchdiff_args")"
        fi
        cmd="${{ steps.install.outputs.benchdiff_bin }}"
        output="$(xargs "$cmd" <<< "$benchdiff_args")"
        echo "$output"
        output="${output//'%'/'%25'}"
        output="${output//$'\n'/'%0A'}"
        output="${output//$'\r'/'%0D'}"
        echo "::set-output name=output::$output"
